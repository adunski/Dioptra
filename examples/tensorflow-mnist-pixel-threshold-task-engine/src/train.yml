parameters:
    seed: -1
    optimizer_name: Adam
    learning_rate: 0.001
    training_dir: /nfs/data/training
    testing_dir: /nfs/data/testing
    image_size: [28, 28, 1]
    validation_split: 0.2
    batch_size: 32
    model_architecture: le_net
    epochs: 30
    register_model_name: ""


tasks:
    init_rng:
        plugin: dioptra_builtins.random.rng.init_rng
        outputs: [seed, rng]

    draw_random:
        plugin: dioptra_builtins.random.sample.draw_random_integer
        outputs: value

    init_tensorflow:
        plugin: dioptra_builtins.backend_configs.tensorflow.init_tensorflow

    log_params:
        plugin: dioptra_builtins.tracking.mlflow.log_parameters

    get_optimizer:
        plugin: dioptra_custom.evaluation.tensorflow.get_optimizer
        outputs: optimizer

    get_perf_metrics:
        plugin: dioptra_custom.evaluation.tensorflow.get_performance_metrics
        outputs: performance_metrics
        
    get_callbacks:
        plugin: dioptra_custom.evaluation.tensorflow.get_model_callbacks
        outputs: callbacks

    create_dataset:
        plugin: dioptra_builtins.data.tensorflow.create_image_dataset
        outputs: dataset
        
    get_num_classes:
        plugin: dioptra_builtins.data.tensorflow.get_n_classes_from_directory_iterator
        outputs: num_classes

    init_classifier:
        plugin: dioptra_builtins.estimators.keras_classifiers.init_classifier
        outputs: classifier

    fit_model:
        plugin: dioptra_builtins.estimators.methods.fit

    eval_metrics_tensorflow:
        plugin: dioptra_custom.evaluation.tensorflow.evaluate_metrics_tensorflow
        outputs: metrics

    log_metrics:
        plugin: dioptra_builtins.tracking.mlflow.log_metrics

    log_keras_estimator:
        plugin: dioptra_builtins.tracking.mlflow.log_tensorflow_keras_estimator

    add_model_to_registry:
        plugin: dioptra_custom.evaluation.mlflow.add_model_to_registry


graph:

    init_rng:
        init_rng: $seed

    global_seed:
        draw_random: $init_rng.rng

    dataset_seed:
        draw_random: $init_rng.rng

    init_tensorflow:
        init_tensorflow: $global_seed

    log_params:
        log_params:
            - entry_point_seed: $init_rng.seed
              tensorflow_global_seed: $global_seed
              dataset_seed: $dataset_seed

    optimizer:
        get_optimizer: [$optimizer_name, $learning_rate]
        dependencies: init_tensorflow

    perf_metrics:
        get_perf_metrics:
            - - name: CategoricalAccuracy
                parameters: {name: accuracy}
              - name: Precision
                parameters: {name: precision}
              - name: Recall
                parameters: {name: recall}
              - name: AUC
                parameters: {name: auc}
        dependencies: init_tensorflow

    callbacks:
        get_callbacks:
            - - name: EarlyStopping
                parameters:
                    monitor: val_loss
                    min_delta: !!float 1e-2
                    patience: 5
                    restore_best_weights: true
        dependencies: init_tensorflow

    training_dataset:
        create_dataset:
            data_dir: $training_dir
            subset: training
            image_size: $image_size
            seed: $dataset_seed
            validation_split: $validation_split
            batch_size: $batch_size
        dependencies: init_tensorflow

    validation_dataset:
        create_dataset:
            data_dir: $training_dir
            subset: validation
            image_size: $image_size
            seed: $dataset_seed
            validation_split: $validation_split
            batch_size: $batch_size
        dependencies: init_tensorflow

    testing_dataset:
        create_dataset:
            data_dir: $testing_dir
            subset: null
            image_size: $image_size
            seed: $dataset_seed
            validation_split: null
            batch_size: $batch_size
        dependencies: init_tensorflow

    num_classes:
        get_num_classes: $training_dataset

    classifier:
        init_classifier:
            - $model_architecture
            - $optimizer
            - $perf_metrics
            - $image_size
            - $num_classes

    model:
        fit_model:
            estimator: $classifier
            x: $training_dataset
            fit_kwargs:
                nb_epochs: $epochs
                validation_data: $validation_dataset
                callbacks: $callbacks
                verbose: 2

    eval_metrics_tensorflow:
        eval_metrics_tensorflow:
            - $classifier
            - $testing_dataset
        dependencies: model

    log_metrics:
        log_metrics: $eval_metrics_tensorflow

    log_keras_estimator:
        log_keras_estimator:
            - $classifier
            - model

    add_model_to_registry:
        add_model_to_registry:
            - $register_model_name
            - model
        dependencies: log_keras_estimator
