"""Create an agents table.

Revision ID: aff9c3debc22
Revises: 148c032ffbd8
Create Date: 2024-06-23 14:55:19.452896

"""

from typing import Annotated

import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import (
    DeclarativeBase,
    Mapped,
    MappedAsDataclass,
    mapped_column,
    sessionmaker,
)

# revision identifiers, used by Alembic.
revision = "aff9c3debc22"
down_revision = "148c032ffbd8"
branch_labels = None
depends_on = None

# Declare list of allowed agent types
AGENT_TYPES = [
    {"agent_type": "job_worker"},
]


# Helper function for inserting the allowed agent types
def _insert_allowed_agent_types(agent_types_table) -> None:
    table_data_mappings = [(agent_types_table, AGENT_TYPES)]

    for table, data in table_data_mappings:
        op.bulk_insert(table, data)


# Migration data models
intpk = Annotated[
    int,
    mapped_column(sa.BigInteger().with_variant(sa.Integer, "sqlite"), primary_key=True),
]
bigint = Annotated[
    int, mapped_column(sa.BigInteger().with_variant(sa.Integer, "sqlite"))
]
text_ = Annotated[str, mapped_column(sa.Text())]


class UpgradeBase(DeclarativeBase, MappedAsDataclass):
    pass


class DowngradeBase(DeclarativeBase, MappedAsDataclass):
    pass


class ResourceTypeUpgrade(UpgradeBase):
    __tablename__ = "resource_types"

    resource_type: Mapped[text_] = mapped_column(primary_key=True)


class ResourceTypeDowngrade(DowngradeBase):
    __tablename__ = "resource_types"

    resource_type: Mapped[text_] = mapped_column(primary_key=True)


class ResourceSnapshotDowngrade(DowngradeBase):
    __tablename__ = "resource_snapshots"

    resource_snapshot_id: Mapped[intpk] = mapped_column(init=False)
    resource_type: Mapped[text_] = mapped_column(
        sa.ForeignKey("resource_types.resource_type"),
        init=False,
        nullable=False,
        index=True,
    )


class ResourceDowngrade(DowngradeBase):
    __tablename__ = "resources"

    resource_id: Mapped[intpk] = mapped_column(init=False)
    resource_type: Mapped[text_] = mapped_column(
        sa.ForeignKey("resource_types.resource_type"), nullable=False, index=True
    )


class ResourceLockDowngrade(DowngradeBase):
    __tablename__ = "resource_locks"

    # Database fields
    resource_id: Mapped[intpk] = mapped_column(
        sa.ForeignKey("resources.resource_id"), init=False
    )


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    Session = sessionmaker(bind=bind)

    # Update the list of allowed resource types in existing resource_types table
    with Session() as session:
        agent_resource_type = ResourceTypeUpgrade(resource_type="agent")
        session.add(agent_resource_type)
        session.commit()

    # Create the new agent tables
    agent_types_table = op.create_table(
        "agent_types",
        sa.Column("agent_type", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("agent_type", name=op.f("pk_agent_types")),
    )
    op.create_table(
        "agents",
        sa.Column(
            "resource_snapshot_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "resource_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("agent_type", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("public_key", sa.JSON(), nullable=False),
        sa.Column("settings", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["agent_type"],
            ["agent_types.agent_type"],
            name=op.f("fk_agents_agent_type_agent_types"),
        ),
        sa.ForeignKeyConstraint(
            ["resource_snapshot_id", "resource_id"],
            [
                "resource_snapshots.resource_snapshot_id",
                "resource_snapshots.resource_id",
            ],
            name=op.f("fk_agents_resource_snapshot_id_resource_snapshots"),
        ),
        sa.PrimaryKeyConstraint("resource_snapshot_id", name=op.f("pk_agents")),
    )
    with op.batch_alter_table("agents", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_agents_agent_type"), ["agent_type"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_agents_name"), ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_agents_resource_id"),
            ["resource_id", "agent_type"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_agents_resource_snapshot_id"),
            ["resource_snapshot_id", "resource_id"],
            unique=True,
        )

    # Insert the allowed agent types
    _insert_allowed_agent_types(agent_types_table=agent_types_table)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    Session = sessionmaker(bind=bind)

    with op.batch_alter_table("agents", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_agents_resource_snapshot_id"))
        batch_op.drop_index(batch_op.f("ix_agents_resource_id"))
        batch_op.drop_index(batch_op.f("ix_agents_name"))
        batch_op.drop_index(batch_op.f("ix_agents_agent_type"))

    op.drop_table("agents")
    op.drop_table("agent_types")

    # Remove all traces of Agent resources from the database
    with Session() as session:
        cte_agent_resource_ids_stmt = (
            sa.select(ResourceDowngrade.resource_id)
            .where(ResourceDowngrade.resource_type == "agent")
            .cte()
        )
        resource_lock_stmt = sa.select(ResourceLockDowngrade).where(
            ResourceLockDowngrade.resource_id.in_(
                sa.select(cte_agent_resource_ids_stmt)
            )
        )
        agent_resource_snapshots_stmt = sa.select(ResourceSnapshotDowngrade).where(
            ResourceSnapshotDowngrade.resource_type == "agent"
        )
        agent_resources_stmt = sa.select(ResourceDowngrade).where(
            ResourceDowngrade.resource_type == "agent"
        )
        agent_resource_type_stmt = sa.select(ResourceTypeDowngrade).where(
            ResourceTypeDowngrade.resource_type == "agent"
        )

        for resource_lock in session.scalars(resource_lock_stmt):
            session.delete(resource_lock)

        for resource_snapshot in session.scalars(agent_resource_snapshots_stmt):
            session.delete(resource_snapshot)

        for resource in session.scalars(agent_resources_stmt):
            session.delete(resource)

        for resource_type in session.scalars(agent_resource_type_stmt):
            session.delete(resource_type)

        session.commit()
    # ### end Alembic commands ###
