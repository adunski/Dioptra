#!/bin/bash
# This Software (Dioptra) is being made available as a public service by the
# National Institute of Standards and Technology (NIST), an Agency of the United
# States Department of Commerce. This software was developed in part by employees of
# NIST and in part by NIST contractors. Copyright in portions of this software that
# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant
# to Title 17 United States Code Section 105, works of NIST employees are not
# subject to copyright protection in the United States. However, NIST may hold
# international copyright in software created by its employees and domestic
# copyright (or licensing rights) in portions of software that were assigned or
# licensed to NIST. To the extent that NIST holds copyright in this software, it is
# being made available under the Creative Commons Attribution 4.0 International
# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts
# of the software developed or licensed by NIST.
#
# ACCESS THE FULL CC BY 4.0 LICENSE HERE:
# https://creativecommons.org/licenses/by/4.0/legalcode

# Created by argbash-init v2.8.1
# ARG_POSITIONAL_SINGLE([repo-url],[Git repo URL to clone])
# ARG_POSITIONAL_SINGLE([dest-dir],[Cloning destination folder])
# ARG_OPTIONAL_SINGLE([dir-chmod],[],[Directory access permission setting],[0755])
# ARG_OPTIONAL_SINGLE([file-chmod],[],[File access permission setting],[0644])
# ARG_OPTIONAL_SINGLE([chown],[],[File ownership setting],[39000:100])
# ARG_OPTIONAL_SINGLE([branch],[b],[Clone and checkout a specific branch],[])
# ARG_OPTIONAL_BOOLEAN([single-branch],[],[Only clone the history of the target branch])
# ARG_USE_ENV([GIT_ACCESS_USER],[],[Username to use when cloning the repository])
# ARG_USE_ENV([GIT_ACCESS_TOKEN],[],[Personal access token to use when cloning the repository])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Container Initialization - Git Clone\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables
# Setting environmental variables


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='bh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_repo_url=
_arg_dest_dir=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dir_chmod="0755"
_arg_file_chmod="0644"
_arg_chown="39000:100"
_arg_branch=
_arg_single_branch="off"


print_help()
{
  printf '%s\n' "Container Initialization - Git Clone
"
  printf 'Usage: %s [--dir-chmod <arg>] [--file-chmod <arg>] [--chown <arg>] [-b|--branch <arg>] [--(no-)single-branch] [-h|--help] <repo-url> <dest-dir>\n' "$0"
  printf '\t%s\n' "<repo-url>: Git repo URL to clone"
  printf '\t%s\n' "<dest-dir>: Cloning destination folder"
  printf '\t%s\n' "--dir-chmod: Directory access permission setting (default: '0755')"
  printf '\t%s\n' "--file-chmod: File access permission setting (default: '0644')"
  printf '\t%s\n' "--chown: File ownership setting (default: '39000:100')"
  printf '\t%s\n' "-b, --branch: Clone and checkout a specific branch (no default)"
  printf '\t%s\n' "--single-branch, --no-single-branch: Only clone the history of the target branch (off by default)"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\nEnvironment variables that are supported:\n'
  printf '\t%s\n' "GIT_ACCESS_USER: Username to use when cloning the repository."
  printf '\t%s\n' "GIT_ACCESS_TOKEN: Personal access token to use when cloning the repository."

}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --dir-chmod)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_dir_chmod="$2"
        shift
        ;;
      --dir-chmod=*)
        _arg_dir_chmod="${_key##--dir-chmod=}"
        ;;
      --file-chmod)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_file_chmod="$2"
        shift
        ;;
      --file-chmod=*)
        _arg_file_chmod="${_key##--file-chmod=}"
        ;;
      --chown)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_chown="$2"
        shift
        ;;
      --chown=*)
        _arg_chown="${_key##--chown=}"
        ;;
      -b|--branch)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_branch="$2"
        shift
        ;;
      --branch=*)
        _arg_branch="${_key##--branch=}"
        ;;
      -b*)
        _arg_branch="${_key##-b}"
        ;;
      --no-single-branch|--single-branch)
        _arg_single_branch="on"
        test "${1:0:5}" = "--no-" && _arg_single_branch="off"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'repo-url' and 'dest-dir'"
  test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_repo_url _arg_dest_dir "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob dotglob nullglob
set -euo pipefail ${DEBUG:+-x}

###########################################################################################
# Global parameters
###########################################################################################

readonly git_user="${GIT_ACCESS_USER:-}"
readonly git_pat="${GIT_ACCESS_TOKEN:-}"
readonly repo_url="${_arg_repo_url}"
readonly dest_dir="${_arg_dest_dir}"
readonly dir_chmod_setting="${_arg_dir_chmod}"
readonly file_chmod_setting="${_arg_file_chmod}"
readonly chown_setting="${_arg_chown}"
readonly branch="${_arg_branch:-}"
readonly single_branch="${_arg_single_branch}"
readonly logname="Container Init: Git Clone"

###########################################################################################
# Git clone operation
#
# Globals:
#   logname
#   git_pat
#   git_user
#   repo_url
#   dest_dir
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

clone_repo() {
  local git_clone_args=()
  local clone_dir
  local uri_scheme
  local uri_host
  local uri_port
  local uri_path

  if ! uri_scheme="$(/usr/local/bin/parse-uri.sh --scheme ${repo_url})"; then
    echo "${logname}: ERROR - Failed to extract the scheme from ${repo_url}" 1>&2
    exit 1
  fi

  if ! uri_host="$(/usr/local/bin/parse-uri.sh --host ${repo_url})"; then
    echo "${logname}: ERROR - Failed to extract the host from ${repo_url}" 1>&2
    exit 1
  fi

  if ! uri_port="$(/usr/local/bin/parse-uri.sh --port ${repo_url})"; then
    echo "${logname}: ERROR - Failed to extract the port from ${repo_url}" 1>&2
    exit 1
  fi

  if ! uri_path="$(/usr/local/bin/parse-uri.sh --path ${repo_url})"; then
    echo "${logname}: ERROR - Failed to extract the path from ${repo_url}" 1>&2
    exit 1
  fi

  if ! clone_dir="$(basename -s .git $(/usr/local/bin/parse-uri.sh --path ${repo_url}))"; then
    echo "${logname}: ERROR - Failed to extract the clone directory from ${repo_url}" 1>&2
    exit 1
  fi

  if [[ -d ${dest_dir}/${clone_dir} ]]; then
    echo "${logname}: INFO - Cloned directory ${dest_dir}/${clone_dir} already" \
      "exists, cloning operation will be skipped." 1>&2
    return 0
  fi

  if [[ ! -z ${branch} ]]; then
    echo "${logname}: INFO - Cloning ${repo_url} to ${dest_dir} (${branch} branch)"
    git_clone_args+=("-b ${branch}")
  else
    echo "${logname}: INFO - Cloning ${repo_url} to ${dest_dir}"
  fi

  if [[ ${single_branch} == on ]]; then
    git_clone_args+=("--single-branch")
  fi

  local clone_url="${uri_scheme}://${git_user:+${git_user}${git_pat:+:${git_pat}}@}${uri_host}${uri_port:+:${uri_port}}${uri_path}"
  git_clone_args+=("${clone_url}")

  if [[ ! -n ${git_pat} ]]; then
    echo "${logname}: WARNING - No personal access token provided, clone will fail" \
      "if ${repo_url} is not public." 1>&2
  fi

  if ! $(cd ${dest_dir} && git clone ${git_clone_args[@]}); then
    echo "${logname}: ERROR - Cloning failed, please check output." 1>&2
    exit 1
  fi
}

###########################################################################################
# Change file access permissions
#
# Globals:
#   logname
#   dir_chmod_setting
#   file_chmod_setting
#   dest_dir
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

chmod_files() {
  echo "${logname}: INFO - Recursively change directory access permissions under" \
    "${dest_dir} to ${dir_chmod_setting}"

  find ${dest_dir} -type d -print0 | xargs -0 chmod ${dir_chmod_setting}

  echo "${logname}: INFO - Recursively change file access permissions under" \
    "${dest_dir} to ${file_chmod_setting}"

  find ${dest_dir} -type f -print0 | xargs -0 chmod ${file_chmod_setting}
}

###########################################################################################
# Change file ownership
#
# Globals:
#   logname
#   chown_setting
#   dest_dir
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

chown_files() {
  echo "${logname}: INFO - Recursively change ownership of ${dest_dir} to" \
    "${chown_setting}"

  chown -R ${chown_setting} ${dest_dir}
}

###########################################################################################
# Main script
###########################################################################################

clone_repo
chown_files
chmod_files
# ] <-- needed because of Argbash
