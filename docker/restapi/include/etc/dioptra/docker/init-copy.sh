#!/bin/bash
# This Software (Dioptra) is being made available as a public service by the
# National Institute of Standards and Technology (NIST), an Agency of the United
# States Department of Commerce. This software was developed in part by employees of
# NIST and in part by NIST contractors. Copyright in portions of this software that
# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant
# to Title 17 United States Code Section 105, works of NIST employees are not
# subject to copyright protection in the United States. However, NIST may hold
# international copyright in software created by its employees and domestic
# copyright (or licensing rights) in portions of software that were assigned or
# licensed to NIST. To the extent that NIST holds copyright in this software, it is
# being made available under the Creative Commons Attribution 4.0 International
# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts
# of the software developed or licensed by NIST.
#
# ACCESS THE FULL CC BY 4.0 LICENSE HERE:
# https://creativecommons.org/licenses/by/4.0/legalcode

# Created by argbash-init v2.8.1
# ARG_POSITIONAL_INF([srcdest],[Source destination pairs to use for copying],[2])
# ARG_OPTIONAL_BOOLEAN([recursive],[r],[Recursive copying])
# ARG_OPTIONAL_SINGLE([chmod],[],[File access permission setting],[0644])
# ARG_OPTIONAL_SINGLE([chown],[],[File ownership setting],[39000:100])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Container Initialization - Copy Files\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='rh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_srcdest=('' '' )
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_recursive="off"
_arg_chmod="0644"
_arg_chown="39000:100"


print_help()
{
  printf '%s\n' "Container Initialization - Copy Files
"
  printf 'Usage: %s [-r|--(no-)recursive] [--chmod <arg>] [--chown <arg>] [-h|--help] <srcdest-1> <srcdest-2> [<srcdest-3>] ... [<srcdest-n>] ...\n' "$0"
  printf '\t%s\n' "<srcdest>: Source destination pairs to use for copying"
  printf '\t%s\n' "-r, --recursive, --no-recursive: Recursive copying (off by default)"
  printf '\t%s\n' "--chmod: File access permission setting (default: '0644')"
  printf '\t%s\n' "--chown: File ownership setting (default: '39000:100')"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -r|--no-recursive|--recursive)
        _arg_recursive="on"
        test "${1:0:5}" = "--no-" && _arg_recursive="off"
        ;;
      -r*)
        _arg_recursive="on"
        _next="${_key##-r}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      --chmod)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_chmod="$2"
        shift
        ;;
      --chmod=*)
        _arg_chmod="${_key##--chmod=}"
        ;;
      --chown)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_chown="$2"
        shift
        ;;
      --chown=*)
        _arg_chown="${_key##--chown=}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'srcdest' (2 times)"
  test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_srcdest[0] _arg_srcdest[1] "
  _our_args=$((${#_positionals[@]} - 2))
  for ((ii = 0; ii < _our_args; ii++))
  do
    _positional_names="$_positional_names _arg_srcdest[$((ii + 2))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail ${DEBUG:+-x}

###########################################################################################
# Global parameters
###########################################################################################

readonly src_dest_pairs_length=${#_arg_srcdest[@]}
readonly chmod_setting="${_arg_chmod}"
readonly chown_setting="${_arg_chown}"
readonly recursive="${_arg_recursive}"
readonly logname="Container Init: Copy file"

###########################################################################################
# Copy file operation
#
# Globals:
#   logname
#   recursive
#   src_dest_pairs_length
#   _arg_srcdest
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

copy_files() {
  local idx=0
  local idx_two=0
  local src_filepath=""
  local dest_filepath=""
  local extra_opts=()

  if [[ ${recursive} == on ]]; then
    extra_opts+=("-r")
  fi

  for ((idx = 0; idx < ${src_dest_pairs_length}; idx += 2)); do
    idx_two=$((${idx} + 1))
    src_filepath=${_arg_srcdest[idx]}
    dest_filepath=${_arg_srcdest[idx_two]}

    if [[ ${recursive} == on ]]; then
      echo "${logname}: INFO - Recursively copy ${src_filepath} to ${dest_filepath}"
    else
      echo "${logname}: INFO - Copy ${src_filepath} to ${dest_filepath}"
    fi

    cp ${extra_opts[@]} ${src_filepath} ${dest_filepath}
  done
}

###########################################################################################
# Change file access permissions
#
# Globals:
#   logname
#   chmod_setting
#   recursive
#   src_dest_pairs_length
#   _arg_srcdest
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

chmod_files() {
  local idx=0
  local idx_two=0
  local dest_filepath=""

  for ((idx = 0; idx < ${src_dest_pairs_length}; idx += 2)); do
    idx_two=$((${idx} + 1))
    dest_filepath=${_arg_srcdest[idx_two]}

    if [[ ${recursive} == on ]]; then
      echo "${logname}: INFO - Recursively change file access permissions under" \
        "${dest_filepath} to ${chmod_setting}"
    else
      echo "${logname}: INFO - Change file access permission of ${dest_filepath} to" \
        "${chmod_setting}"
    fi

    if [[ ${recursive} == on ]]; then
      find ${dest_filepath} -type f -print0 | xargs -0 chmod ${chmod_setting}
    else
      chmod ${chmod_setting} ${dest_filepath}
    fi
  done
}

###########################################################################################
# Change file ownership
#
# Globals:
#   logname
#   chown_setting
#   src_dest_pairs_length
#   _arg_srcdest
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

chown_files() {
  local idx=0
  local idx_two=0
  local dest_filepath=""
  local extra_opts=()

  if [[ ${recursive} == on ]]; then
    extra_opts+=("-R")
  fi

  for ((idx = 0; idx < ${src_dest_pairs_length}; idx += 2)); do
    idx_two=$((${idx} + 1))
    dest_filepath=${_arg_srcdest[idx_two]}

    if [[ ${recursive} == on ]]; then
      echo "${logname}: INFO - Recursively change ownership of ${dest_filepath} to" \
        "${chown_setting}"
    else
      echo "${logname}: INFO - Change ownership of ${dest_filepath} to ${chown_setting}"
    fi

    chown ${extra_opts[@]} ${chown_setting} ${dest_filepath}
  done
}

###########################################################################################
# Main script
###########################################################################################

copy_files
chown_files
chmod_files
# ] <-- needed because of Argbash
