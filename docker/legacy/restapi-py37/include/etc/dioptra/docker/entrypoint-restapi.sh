#!/bin/bash
# This Software (Dioptra) is being made available as a public service by the
# National Institute of Standards and Technology (NIST), an Agency of the United
# States Department of Commerce. This software was developed in part by employees of
# NIST and in part by NIST contractors. Copyright in portions of this software that
# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant
# to Title 17 United States Code Section 105, works of NIST employees are not
# subject to copyright protection in the United States. However, NIST may hold
# international copyright in software created by its employees and domestic
# copyright (or licensing rights) in portions of software that were assigned or
# licensed to NIST. To the extent that NIST holds copyright in this software, it is
# being made available under the Creative Commons Attribution 4.0 International
# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts
# of the software developed or licensed by NIST.
#
# ACCESS THE FULL CC BY 4.0 LICENSE HERE:
# https://creativecommons.org/licenses/by/4.0/legalcode

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([app-module],[],[Application module],[wsgi:app])
# ARG_OPTIONAL_SINGLE([backend],[],[Server backend],[gunicorn])
# ARG_OPTIONAL_SINGLE([conda-env],[],[Conda environment],[dioptra])
# ARG_OPTIONAL_SINGLE([gunicorn-module],[],[Python module used to start Gunicorn WSGI server],[dioptra.restapi.cli.gunicorn])
# ARG_OPTIONAL_ACTION([upgrade-db],[],[Upgrade the database schema],[upgrade_database])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Dioptra API Entry Point\n])"
# ARGBASH_PREPARE()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_app_module="wsgi:app"
_arg_backend="gunicorn"
_arg_conda_env="dioptra"
_arg_gunicorn_module="dioptra.restapi.cli.gunicorn"


print_help()
{
  printf '%s\n' "Dioptra API Entry Point
"
  printf 'Usage: %s [--app-module <arg>] [--backend <arg>] [--conda-env <arg>] [--gunicorn-module <arg>] [--upgrade-db] [-h|--help]\n' "$0"
  printf '\t%s\n' "--app-module: Application module (default: 'wsgi:app')"
  printf '\t%s\n' "--backend: Server backend (default: 'gunicorn')"
  printf '\t%s\n' "--conda-env: Conda environment (default: 'dioptra')"
  printf '\t%s\n' "--gunicorn-module: Python module used to start Gunicorn WSGI server (default: 'dioptra.restapi.cli.gunicorn')"
  printf '\t%s\n' "--upgrade-db: Upgrade the database schema"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --app-module)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_app_module="$2"
        shift
        ;;
      --app-module=*)
        _arg_app_module="${_key##--app-module=}"
        ;;
      --backend)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_backend="$2"
        shift
        ;;
      --backend=*)
        _arg_backend="${_key##--backend=}"
        ;;
      --conda-env)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_conda_env="$2"
        shift
        ;;
      --conda-env=*)
        _arg_conda_env="${_key##--conda-env=}"
        ;;
      --gunicorn-module)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_gunicorn_module="$2"
        shift
        ;;
      --gunicorn-module=*)
        _arg_gunicorn_module="${_key##--gunicorn-module=}"
        ;;
      --upgrade-db)
        upgrade_database
        exit 0
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}


# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

###########################################################################################
# Global parameters
###########################################################################################

readonly dioptra_workdir="${DIOPTRA_WORKDIR}"
readonly conda_dir="${CONDA_DIR}"
readonly gunicorn_module="${_arg_gunicorn_module}"
readonly logname="Container Entry Point"

set_parsed_globals() {
  readonly app_module="${_arg_app_module}"
  readonly conda_env="${_arg_conda_env}"
  readonly server_backend="${_arg_backend}"
}

###########################################################################################
# Secure the container at runtime
#
# Globals:
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

secure_container() {
  if [[ -f /usr/local/bin/secure-container.sh ]]; then
    /usr/local/bin/secure-container.sh
  else
    echo "${logname}: ERROR - /usr/local/bin/secure-container.sh script missing" 1>&2
    exit 1
  fi
}

###########################################################################################
# Upgrade the Dioptra database
#
# Globals:
#   dioptra_workdir
#   conda_dir
#   conda_env
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

upgrade_database() {
  echo "${logname}: INFO - Upgrading the Dioptra database"

  set_parsed_globals

  bash -c "\
  source ${conda_dir}/etc/profile.d/conda.sh &&\
  conda activate ${conda_env} &&\
  cd ${dioptra_workdir} &&\
  flask db upgrade -d ${dioptra_workdir}/migrations"
}

###########################################################################################
# Start gunicorn server
#
# Globals:
#   dioptra_workdir
#   app_module
#   conda_dir
#   conda_env
#   gunicorn_module
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

start_gunicorn() {
  echo "${logname}: INFO - Starting gunicorn server"

  bash -c "\
  source ${conda_dir}/etc/profile.d/conda.sh &&\
  conda activate ${conda_env} &&\
  cd ${dioptra_workdir} &&\
  python -m ${gunicorn_module} -c /etc/gunicorn/gunicorn.conf.py ${app_module}"
}

###########################################################################################
# Start RESTful API service
#
# Globals:
#   logname
#   server_backend
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

start_restapi() {
  case ${server_backend} in
    gunicorn)
      start_gunicorn
      ;;
    *)
      echo "${logname}: ERROR - unsupported backend - ${server_backend}" 1>&2
      exit 1
      ;;
  esac
}

###########################################################################################
# Main script
###########################################################################################

parse_commandline "$@"
set_parsed_globals
secure_container
start_restapi
# ] <-- needed because of Argbash
